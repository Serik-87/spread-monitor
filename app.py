import streamlit as st
import requests
import pandas as pd
from datetime import datetime
import plotly.graph_objects as go
import json
import os
import time

# --- Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = "8070255262:AAEzecDs3VIvIpG4_-8A9I1iaz3N9tEJX5w"
CHAT_ID = "396459350"

# --- –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ ---
HISTORY_FILE = "history.json"

# --- Streamlit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
st.set_page_config(page_title="Gate.io vs DEX Spread Monitor", layout="wide")
st.title("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ø—Ä–µ–¥–∞: Gate.io vs DEX")
st.sidebar.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
future_symbol = st.sidebar.text_input("Gate.io —Ñ—å—é—á–µ—Ä—Å", "BOOM_USDT")
contract_address = st.sidebar.text_input("–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ (BNB)", "0xcE7C3B5E058C196a0EAAa21F8E4BF8C2C07C2935")
spread_up = st.sidebar.number_input("üî∫ –°–ø—Ä–µ–¥ –≤–≤–µ—Ä—Ö (%)", value=2.0)
spread_down = st.sidebar.number_input("üîª –°–ø—Ä–µ–¥ –≤–Ω–∏–∑ (%)", value=-2.0)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
if os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, "r") as f:
        st.session_state.history = json.load(f)
else:
    st.session_state.history = {
        "time": [], "cex": [], "dex": [], "spread": [], "dex_name": [], "dex_link": []
    }

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Gate.io ---
def get_gate_price(symbol):
    try:
        url = "https://api.gateio.ws/api/v4/futures/usdt/tickers"
        res = requests.get(url, timeout=10).json()
        for item in res:
            if item["contract"].lower() == symbol.lower():
                return float(item["last"])
    except Exception as e:
        print("Gate.io error:", e)
    return None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Dexscreener ---
def get_dex_price(contract):
    try:
        url = f"https://api.dexscreener.com/latest/dex/search?q={contract}"
        res = requests.get(url, timeout=10).json()

        best = None
        max_liquidity = 0

        for pair in res["pairs"]:
            if not pair.get("priceUsd"):
                continue
            liquidity = float(pair["liquidity"]["usd"])
            if liquidity > max_liquidity:
                max_liquidity = liquidity
                best = pair

        if best:
            return float(best["priceUsd"]), best["dexId"], best["url"], max_liquidity
    except Exception as e:
        print("Dexscreener error:", e)
    return None, None, None, None

# --- Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
def send_telegram_alert(spread, token, dex_name, dex_link, gate_symbol, liquidity):
    message = (
        f"üì£ *–ê—Ä–±–∏—Ç—Ä–∞–∂ –æ–±–Ω–∞—Ä—É–∂–µ–Ω*\n"
        f"*–¢–æ–∫–µ–Ω:* `{token}` ({dex_name})\n"
        f"üìä *–°–ø—Ä–µ–¥:* `{spread:.2f}%`\n"
        f"üíß *–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:* `${liquidity:,.0f}`\n"
        f"üü¢ [DEX (Dexscreener)]({dex_link})\n"
        f"üîµ [–§—å—é—á–µ—Ä—Å Gate.io](https://www.gate.io/futures_trade/{gate_symbol})"
    )

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }

    try:
        response = requests.post(url, data=data)
        print("Telegram:", response.status_code, response.text)
    except Exception as e:
        print("Telegram error:", e)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ ---
placeholder = st.empty()
last_alert_time = 0

while True:
    now = datetime.now().strftime("%H:%M:%S")

    cex_price = get_gate_price(future_symbol)
    dex_price, dex_name, dex_link, liquidity = get_dex_price(contract_address)

    with placeholder.container():
        if cex_price and dex_price:
            spread = (cex_price - dex_price) / dex_price * 100

            # --- –ò—Å—Ç–æ—Ä–∏—è ---
            st.session_state.history["time"].append(now)
            st.session_state.history["cex"].append(cex_price)
            st.session_state.history["dex"].append(dex_price)
            st.session_state.history["spread"].append(spread)
            st.session_state.history["dex_name"].append(dex_name)
            st.session_state.history["dex_link"].append(dex_link)

            with open(HISTORY_FILE, "w") as f:
                json.dump(st.session_state.history, f)

            # --- –ú–µ—Ç—Ä–∏–∫–∏ ---
            col1, col2, col3 = st.columns(3)
            col1.metric("üìâ Gate.io", f"{cex_price:.6f} USDT")
            col2.metric(f"ü•û {dex_name}", f"{dex_price:.6f} USDT")
            col3.metric("üìä –°–ø—Ä–µ–¥", f"{spread:.2f}%")

            # --- –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
            df = pd.DataFrame({
                "–í—Ä–µ–º—è": st.session_state.history["time"],
                "Gate.io": st.session_state.history["cex"],
                "DEX": st.session_state.history["dex"],
                "–°–ø—Ä–µ–¥ (%)": st.session_state.history["spread"]
            })

            if not df.empty:
                max_spread = df["–°–ø—Ä–µ–¥ (%)"].max()
                min_spread = df["–°–ø—Ä–µ–¥ (%)"].min()
                max_spread_time = df[df["–°–ø—Ä–µ–¥ (%)"] == max_spread]["–í—Ä–µ–º—è"].values[0]
                min_spread_time = df[df["–°–ø—Ä–µ–¥ (%)"] == min_spread]["–í—Ä–µ–º—è"].values[0]

                col4, col5 = st.columns(2)
                col4.metric("üìà –ú–∞–∫—Å. —Å–ø—Ä–µ–¥", f"{max_spread:.2f}%", help=f"–í—Ä–µ–º—è: {max_spread_time}")
                col5.metric("üìâ –ú–∏–Ω. —Å–ø—Ä–µ–¥", f"{min_spread:.2f}%", help=f"–í—Ä–µ–º—è: {min_spread_time}")

            # --- –ì—Ä–∞—Ñ–∏–∫ ---
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=df["–í—Ä–µ–º—è"], y=df["Gate.io"], name="Gate.io", line=dict(color="blue")))
            fig.add_trace(go.Scatter(x=df["–í—Ä–µ–º—è"], y=df["DEX"], name="DEX", line=dict(color="green")))
            fig.add_trace(go.Scatter(x=df["–í—Ä–µ–º—è"], y=df["–°–ø—Ä–µ–¥ (%)"], name="–°–ø—Ä–µ–¥ (%)",
                                     line=dict(color="red", dash="dot"), yaxis="y2"))

            fig.update_layout(
                xaxis=dict(
                    title="–í—Ä–µ–º—è",
                    rangeslider=dict(visible=True),
                    rangeselector=dict(
                        buttons=list([
                            dict(count=10, label="10 –º–∏–Ω", step="minute", stepmode="backward"),
                            dict(count=30, label="30 –º–∏–Ω", step="minute", stepmode="backward"),
                            dict(step="all", label="–í—Å—ë")
                        ])
                    )
                ),
                yaxis=dict(title="–¶–µ–Ω–∞ USDT"),
                yaxis2=dict(title="–°–ø—Ä–µ–¥ %", overlaying="y", side="right"),
                hovermode="x unified",
                legend=dict(x=0, y=1.1, orientation="h"),
                height=600
            )

            st.plotly_chart(fig, use_container_width=True)
            st.markdown(f"[üîó DexScreener]({dex_link})")

            # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
            if (spread >= spread_up or spread <= spread_down) and (time.time() - last_alert_time > 300):
                send_telegram_alert(spread, future_symbol, dex_name, dex_link, future_symbol, liquidity)
                last_alert_time = time.time()

        else:
            st.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å Gate.io –∏–ª–∏ DEX")

    time.sleep(10)
